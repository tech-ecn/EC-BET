/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import {
  Callback,
  PayableTransactionObject,
  NonPayableTransactionObject,
  BlockType,
  ContractEventLog,
  BaseContract,
} from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export type MetaTransactionExecuted = ContractEventLog<{
  userAddress: string;
  relayerAddress: string;
  functionSignature: string;
  0: string;
  1: string;
  2: string;
}>;

export interface BasicMetaTransaction extends BaseContract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  ): BasicMetaTransaction;
  clone(): BasicMetaTransaction;
  methods: {
    getChainID(): NonPayableTransactionObject<string>;

    /**
     * Main function to be called when user wants to execute meta transaction. The actual function to be called should be passed as param with name functionSignature Here the basic signature recovery is being used. Signature is expected to be generated using personal_sign method.
     * @param functionSignature Signature of the actual function to be called via meta transaction
     * @param sigR R part of the signature
     * @param sigS S part of the signature
     * @param sigV V part of the signature
     * @param userAddress Address of user trying to do meta transaction
     */
    executeMetaTransaction(
      userAddress: string,
      functionSignature: string | number[],
      sigR: string | number[],
      sigS: string | number[],
      sigV: number | string | BN
    ): PayableTransactionObject<string>;

    getNonce(user: string): NonPayableTransactionObject<string>;

    verify(
      owner: string,
      nonce: number | string | BN,
      chainID: number | string | BN,
      functionSignature: string | number[],
      sigR: string | number[],
      sigS: string | number[],
      sigV: number | string | BN
    ): NonPayableTransactionObject<boolean>;
  };
  events: {
    MetaTransactionExecuted(
      cb?: Callback<MetaTransactionExecuted>
    ): EventEmitter;
    MetaTransactionExecuted(
      options?: EventOptions,
      cb?: Callback<MetaTransactionExecuted>
    ): EventEmitter;

    allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter;
  };

  once(
    event: "MetaTransactionExecuted",
    cb: Callback<MetaTransactionExecuted>
  ): void;
  once(
    event: "MetaTransactionExecuted",
    options: EventOptions,
    cb: Callback<MetaTransactionExecuted>
  ): void;
}

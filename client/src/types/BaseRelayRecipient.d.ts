/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from 'bn.js'
import { ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import { Callback, PayableTransactionObject, NonPayableTransactionObject, BlockType, ContractEventLog, BaseContract } from './types'

interface EventOptions {
	filter?: object
	fromBlock?: BlockType
	topics?: string[]
}

export interface BaseRelayRecipient extends BaseContract {
	constructor(jsonInterface: any[], address?: string, options?: ContractOptions): BaseRelayRecipient
	clone(): BaseRelayRecipient
	methods: {
		trustedForwarder(): NonPayableTransactionObject<string>

		/**
		 * return the sender of this call. if the call came through our trusted forwarder, then the real sender is appended as the last 20 bytes of the msg.data. otherwise, return `msg.sender` should be used in the contract anywhere instead of msg.sender
		 */
		versionRecipient(): NonPayableTransactionObject<string>

		/**
		 * return if the forwarder is trusted to forward relayed transactions to us. the forwarder is required to verify the sender's signature, and verify the call is not a replay.
		 */
		isTrustedForwarder(forwarder: string): NonPayableTransactionObject<boolean>
	}
	events: {
		allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter
	}
}

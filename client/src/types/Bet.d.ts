/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from 'bn.js'
import { ContractOptions } from 'web3-eth-contract'
import { EventLog } from 'web3-core'
import { EventEmitter } from 'events'
import { Callback, PayableTransactionObject, NonPayableTransactionObject, BlockType, ContractEventLog, BaseContract } from './types'

interface EventOptions {
	filter?: object
	fromBlock?: BlockType
	topics?: string[]
}

export type BetCounterUpdate = ContractEventLog<{
	bet_counter: string
	0: string
}>
export type BetInstanceCounterUpdate = ContractEventLog<{
	bet_instance_counter: string
	0: string
}>

export interface Bet extends BaseContract {
	constructor(jsonInterface: any[], address?: string, options?: ContractOptions): Bet
	clone(): Bet
	methods: {
		UserBets(arg0: string, arg1: number | string | BN): NonPayableTransactionObject<string>

		bet_counter(): NonPayableTransactionObject<string>

		bet_instance_counter(): NonPayableTransactionObject<string>

		bets(
			arg0: number | string | BN
		): NonPayableTransactionObject<{
			startTime: string
			endTime: string
			status: string
			exists: boolean
			winner: string
			percentFeesTimes100: string
			0: string
			1: string
			2: string
			3: boolean
			4: string
			5: string
		}>

		bets_instances(
			arg0: number | string | BN
		): NonPayableTransactionObject<{
			bettorA: string
			bettorB: string
			exists: boolean
			bet_counter: string
			bet_amount: string
			fees: string
			0: string
			1: string
			2: boolean
			3: string
			4: string
			5: string
		}>

		/**
		 * return if the forwarder is trusted to forward relayed transactions to us. the forwarder is required to verify the sender's signature, and verify the call is not a replay.
		 */
		isTrustedForwarder(forwarder: string): NonPayableTransactionObject<boolean>

		percentFeesTimes100(): NonPayableTransactionObject<string>

		trustedForwarder(): NonPayableTransactionObject<string>

		wallet(): NonPayableTransactionObject<string>

		declareResult(_counter: number | string | BN, winner: number | string | BN): NonPayableTransactionObject<void>

		withdraw(_bet_instance_counter: number | string | BN): NonPayableTransactionObject<void>

		getUserBetCount(): NonPayableTransactionObject<string>

		updateFees(_percentFeesTimes100: number | string | BN): NonPayableTransactionObject<void>

		createBet(startTime: number | string | BN, endTime: number | string | BN): NonPayableTransactionObject<string>

		allowBet(_bet_counter: number | string | BN, bet_amount: number | string | BN): NonPayableTransactionObject<void>

		allowBetAgainst(_bet_instance_counter: number | string | BN): NonPayableTransactionObject<void>

		/**
		 * return the sender of this call. if the call came through our trusted forwarder, then the real sender is appended as the last 20 bytes of the msg.data. otherwise, return `msg.sender` should be used in the contract anywhere instead of msg.sender
		 */
		versionRecipient(): NonPayableTransactionObject<string>
	}
	events: {
		BetCounterUpdate(cb?: Callback<BetCounterUpdate>): EventEmitter
		BetCounterUpdate(options?: EventOptions, cb?: Callback<BetCounterUpdate>): EventEmitter

		BetInstanceCounterUpdate(cb?: Callback<BetInstanceCounterUpdate>): EventEmitter
		BetInstanceCounterUpdate(options?: EventOptions, cb?: Callback<BetInstanceCounterUpdate>): EventEmitter

		allEvents(options?: EventOptions, cb?: Callback<EventLog>): EventEmitter
	}

	once(event: 'BetCounterUpdate', cb: Callback<BetCounterUpdate>): void
	once(event: 'BetCounterUpdate', options: EventOptions, cb: Callback<BetCounterUpdate>): void

	once(event: 'BetInstanceCounterUpdate', cb: Callback<BetInstanceCounterUpdate>): void
	once(event: 'BetInstanceCounterUpdate', options: EventOptions, cb: Callback<BetInstanceCounterUpdate>): void
}

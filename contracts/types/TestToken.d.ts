/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { BigNumber } from 'bignumber.js'

export interface TestTokenContract extends Truffle.Contract<TestTokenInstance> {
	'new'(trustedForwarder_: string | BigNumber, meta?: Truffle.TransactionDetails): Promise<TestTokenInstance>
}

export interface Approval {
	name: 'Approval'
	args: {
		owner: string
		spender: string
		value: BigNumber
	}
}

export interface Transfer {
	name: 'Transfer'
	args: {
		from: string
		to: string
		value: BigNumber
	}
}

type AllEvents = Approval | Transfer

export interface TestTokenInstance extends Truffle.ContractInstance {
	/**
	 * See {IERC20-allowance}.
	 */
	allowance(owner: string | BigNumber, spender: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<BigNumber>

	/**
	 * See {IERC20-approve}. Requirements: - `spender` cannot be the zero address.
	 */
	approve: {
		(spender: string | BigNumber, amount: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<
			Truffle.TransactionResponse<AllEvents>
		>
		call(spender: string | BigNumber, amount: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<boolean>
		sendTransaction(spender: string | BigNumber, amount: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<string>
		estimateGas(spender: string | BigNumber, amount: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<number>
	}

	/**
	 * See {IERC20-balanceOf}.
	 */
	balanceOf(account: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<BigNumber>

	/**
	 * Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5,05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the value {ERC20} uses, unless this function is overloaded; NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.
	 */
	decimals(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>

	/**
	 * Atomically decreases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address. - `spender` must have allowance for the caller of at least `subtractedValue`.
	 */
	decreaseAllowance: {
		(spender: string | BigNumber, subtractedValue: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<
			Truffle.TransactionResponse<AllEvents>
		>
		call(spender: string | BigNumber, subtractedValue: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<boolean>
		sendTransaction(
			spender: string | BigNumber,
			subtractedValue: number | BigNumber | string,
			txDetails?: Truffle.TransactionDetails
		): Promise<string>
		estimateGas(
			spender: string | BigNumber,
			subtractedValue: number | BigNumber | string,
			txDetails?: Truffle.TransactionDetails
		): Promise<number>
	}

	/**
	 * Atomically increases the allowance granted to `spender` by the caller. This is an alternative to {approve} that can be used as a mitigation for problems described in {IERC20-approve}. Emits an {Approval} event indicating the updated allowance. Requirements: - `spender` cannot be the zero address.
	 */
	increaseAllowance: {
		(spender: string | BigNumber, addedValue: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<
			Truffle.TransactionResponse<AllEvents>
		>
		call(spender: string | BigNumber, addedValue: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<boolean>
		sendTransaction(spender: string | BigNumber, addedValue: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<string>
		estimateGas(spender: string | BigNumber, addedValue: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<number>
	}

	/**
	 * return if the forwarder is trusted to forward relayed transactions to us. the forwarder is required to verify the sender's signature, and verify the call is not a replay.
	 */
	isTrustedForwarder(forwarder: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<boolean>

	/**
	 * Returns the name of the token.
	 */
	name(txDetails?: Truffle.TransactionDetails): Promise<string>

	/**
	 * Returns the symbol of the token, usually a shorter version of the name.
	 */
	symbol(txDetails?: Truffle.TransactionDetails): Promise<string>

	/**
	 * See {IERC20-totalSupply}.
	 */
	totalSupply(txDetails?: Truffle.TransactionDetails): Promise<BigNumber>

	/**
	 * See {IERC20-transfer}. Requirements: - `recipient` cannot be the zero address. - the caller must have a balance of at least `amount`.
	 */
	transfer: {
		(recipient: string | BigNumber, amount: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<
			Truffle.TransactionResponse<AllEvents>
		>
		call(recipient: string | BigNumber, amount: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<boolean>
		sendTransaction(recipient: string | BigNumber, amount: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<string>
		estimateGas(recipient: string | BigNumber, amount: number | BigNumber | string, txDetails?: Truffle.TransactionDetails): Promise<number>
	}

	/**
	 * See {IERC20-transferFrom}. Emits an {Approval} event indicating the updated allowance. This is not required by the EIP. See the note at the beginning of {ERC20}. Requirements: - `sender` and `recipient` cannot be the zero address. - `sender` must have a balance of at least `amount`. - the caller must have allowance for ``sender``'s tokens of at least `amount`.
	 */
	transferFrom: {
		(
			sender: string | BigNumber,
			recipient: string | BigNumber,
			amount: number | BigNumber | string,
			txDetails?: Truffle.TransactionDetails
		): Promise<Truffle.TransactionResponse<AllEvents>>
		call(
			sender: string | BigNumber,
			recipient: string | BigNumber,
			amount: number | BigNumber | string,
			txDetails?: Truffle.TransactionDetails
		): Promise<boolean>
		sendTransaction(
			sender: string | BigNumber,
			recipient: string | BigNumber,
			amount: number | BigNumber | string,
			txDetails?: Truffle.TransactionDetails
		): Promise<string>
		estimateGas(
			sender: string | BigNumber,
			recipient: string | BigNumber,
			amount: number | BigNumber | string,
			txDetails?: Truffle.TransactionDetails
		): Promise<number>
	}

	trustedForwarder(txDetails?: Truffle.TransactionDetails): Promise<string>

	/**
	 * return the sender of this call. if the call came through our trusted forwarder, then the real sender is appended as the last 20 bytes of the msg.data. otherwise, return `msg.sender` should be used in the contract anywhere instead of msg.sender
	 */
	versionRecipient(txDetails?: Truffle.TransactionDetails): Promise<string>

	mint: {
		(txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse<AllEvents>>
		call(txDetails?: Truffle.TransactionDetails): Promise<void>
		sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>
		estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>
	}
}

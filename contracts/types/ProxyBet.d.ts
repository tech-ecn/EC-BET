/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { BigNumber } from 'bignumber.js'

export interface ProxyBetContract extends Truffle.Contract<ProxyBetInstance> {
	'new'(_logic: string | BigNumber, _data: string, meta?: Truffle.TransactionDetails): Promise<ProxyBetInstance>
}

export interface OwnershipTransferred {
	name: 'OwnershipTransferred'
	args: {
		previousOwner: string
		newOwner: string
	}
}

export interface Upgraded {
	name: 'Upgraded'
	args: {
		implementation: string
	}
}

type AllEvents = OwnershipTransferred | Upgraded

export interface ProxyBetInstance extends Truffle.ContractInstance {
	/**
	 * Returns the address of the current owner.
	 */
	owner(txDetails?: Truffle.TransactionDetails): Promise<string>

	/**
	 * Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.
	 */
	renounceOwnership: {
		(txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse<AllEvents>>
		call(txDetails?: Truffle.TransactionDetails): Promise<void>
		sendTransaction(txDetails?: Truffle.TransactionDetails): Promise<string>
		estimateGas(txDetails?: Truffle.TransactionDetails): Promise<number>
	}

	/**
	 * Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.
	 */
	transferOwnership: {
		(newOwner: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse<AllEvents>>
		call(newOwner: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<void>
		sendTransaction(newOwner: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<string>
		estimateGas(newOwner: string | BigNumber, txDetails?: Truffle.TransactionDetails): Promise<number>
	}

	implementation(txDetails?: Truffle.TransactionDetails): Promise<string>

	upgradeTo: {
		(_logic: string | BigNumber, _data: string, txDetails?: Truffle.TransactionDetails): Promise<Truffle.TransactionResponse<AllEvents>>
		call(_logic: string | BigNumber, _data: string, txDetails?: Truffle.TransactionDetails): Promise<void>
		sendTransaction(_logic: string | BigNumber, _data: string, txDetails?: Truffle.TransactionDetails): Promise<string>
		estimateGas(_logic: string | BigNumber, _data: string, txDetails?: Truffle.TransactionDetails): Promise<number>
	}
}
